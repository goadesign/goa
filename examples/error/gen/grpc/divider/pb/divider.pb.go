// Code generated by protoc-gen-go. DO NOT EDIT.
// source: divider.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IntegerDivideRequest struct {
	// Left operand
	A int32 `protobuf:"zigzag32,1,opt,name=a,proto3" json:"a,omitempty"`
	// Right operand
	B                    int32    `protobuf:"zigzag32,2,opt,name=b,proto3" json:"b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IntegerDivideRequest) Reset()         { *m = IntegerDivideRequest{} }
func (m *IntegerDivideRequest) String() string { return proto.CompactTextString(m) }
func (*IntegerDivideRequest) ProtoMessage()    {}
func (*IntegerDivideRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_divider_7a99dab6f8f91d55, []int{0}
}
func (m *IntegerDivideRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntegerDivideRequest.Unmarshal(m, b)
}
func (m *IntegerDivideRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntegerDivideRequest.Marshal(b, m, deterministic)
}
func (dst *IntegerDivideRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntegerDivideRequest.Merge(dst, src)
}
func (m *IntegerDivideRequest) XXX_Size() int {
	return xxx_messageInfo_IntegerDivideRequest.Size(m)
}
func (m *IntegerDivideRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IntegerDivideRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IntegerDivideRequest proto.InternalMessageInfo

func (m *IntegerDivideRequest) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *IntegerDivideRequest) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

type IntegerDivideResponse struct {
	Field                int32    `protobuf:"zigzag32,1,opt,name=field,proto3" json:"field,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IntegerDivideResponse) Reset()         { *m = IntegerDivideResponse{} }
func (m *IntegerDivideResponse) String() string { return proto.CompactTextString(m) }
func (*IntegerDivideResponse) ProtoMessage()    {}
func (*IntegerDivideResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_divider_7a99dab6f8f91d55, []int{1}
}
func (m *IntegerDivideResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntegerDivideResponse.Unmarshal(m, b)
}
func (m *IntegerDivideResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntegerDivideResponse.Marshal(b, m, deterministic)
}
func (dst *IntegerDivideResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntegerDivideResponse.Merge(dst, src)
}
func (m *IntegerDivideResponse) XXX_Size() int {
	return xxx_messageInfo_IntegerDivideResponse.Size(m)
}
func (m *IntegerDivideResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IntegerDivideResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IntegerDivideResponse proto.InternalMessageInfo

func (m *IntegerDivideResponse) GetField() int32 {
	if m != nil {
		return m.Field
	}
	return 0
}

type DivideRequest struct {
	// Left operand
	A float64 `protobuf:"fixed64,1,opt,name=a,proto3" json:"a,omitempty"`
	// Right operand
	B                    float64  `protobuf:"fixed64,2,opt,name=b,proto3" json:"b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DivideRequest) Reset()         { *m = DivideRequest{} }
func (m *DivideRequest) String() string { return proto.CompactTextString(m) }
func (*DivideRequest) ProtoMessage()    {}
func (*DivideRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_divider_7a99dab6f8f91d55, []int{2}
}
func (m *DivideRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DivideRequest.Unmarshal(m, b)
}
func (m *DivideRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DivideRequest.Marshal(b, m, deterministic)
}
func (dst *DivideRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DivideRequest.Merge(dst, src)
}
func (m *DivideRequest) XXX_Size() int {
	return xxx_messageInfo_DivideRequest.Size(m)
}
func (m *DivideRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DivideRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DivideRequest proto.InternalMessageInfo

func (m *DivideRequest) GetA() float64 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *DivideRequest) GetB() float64 {
	if m != nil {
		return m.B
	}
	return 0
}

type DivideResponse struct {
	Field                float64  `protobuf:"fixed64,1,opt,name=field,proto3" json:"field,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DivideResponse) Reset()         { *m = DivideResponse{} }
func (m *DivideResponse) String() string { return proto.CompactTextString(m) }
func (*DivideResponse) ProtoMessage()    {}
func (*DivideResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_divider_7a99dab6f8f91d55, []int{3}
}
func (m *DivideResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DivideResponse.Unmarshal(m, b)
}
func (m *DivideResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DivideResponse.Marshal(b, m, deterministic)
}
func (dst *DivideResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DivideResponse.Merge(dst, src)
}
func (m *DivideResponse) XXX_Size() int {
	return xxx_messageInfo_DivideResponse.Size(m)
}
func (m *DivideResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DivideResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DivideResponse proto.InternalMessageInfo

func (m *DivideResponse) GetField() float64 {
	if m != nil {
		return m.Field
	}
	return 0
}

func init() {
	proto.RegisterType((*IntegerDivideRequest)(nil), "pb.IntegerDivideRequest")
	proto.RegisterType((*IntegerDivideResponse)(nil), "pb.IntegerDivideResponse")
	proto.RegisterType((*DivideRequest)(nil), "pb.DivideRequest")
	proto.RegisterType((*DivideResponse)(nil), "pb.DivideResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DividerClient is the client API for Divider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DividerClient interface {
	// IntegerDivide implements integer_divide.
	IntegerDivide(ctx context.Context, in *IntegerDivideRequest, opts ...grpc.CallOption) (*IntegerDivideResponse, error)
	// Divide implements divide.
	Divide(ctx context.Context, in *DivideRequest, opts ...grpc.CallOption) (*DivideResponse, error)
}

type dividerClient struct {
	cc *grpc.ClientConn
}

func NewDividerClient(cc *grpc.ClientConn) DividerClient {
	return &dividerClient{cc}
}

func (c *dividerClient) IntegerDivide(ctx context.Context, in *IntegerDivideRequest, opts ...grpc.CallOption) (*IntegerDivideResponse, error) {
	out := new(IntegerDivideResponse)
	err := c.cc.Invoke(ctx, "/pb.Divider/IntegerDivide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dividerClient) Divide(ctx context.Context, in *DivideRequest, opts ...grpc.CallOption) (*DivideResponse, error) {
	out := new(DivideResponse)
	err := c.cc.Invoke(ctx, "/pb.Divider/Divide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DividerServer is the server API for Divider service.
type DividerServer interface {
	// IntegerDivide implements integer_divide.
	IntegerDivide(context.Context, *IntegerDivideRequest) (*IntegerDivideResponse, error)
	// Divide implements divide.
	Divide(context.Context, *DivideRequest) (*DivideResponse, error)
}

func RegisterDividerServer(s *grpc.Server, srv DividerServer) {
	s.RegisterService(&_Divider_serviceDesc, srv)
}

func _Divider_IntegerDivide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegerDivideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DividerServer).IntegerDivide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Divider/IntegerDivide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DividerServer).IntegerDivide(ctx, req.(*IntegerDivideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Divider_Divide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DivideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DividerServer).Divide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Divider/Divide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DividerServer).Divide(ctx, req.(*DivideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Divider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Divider",
	HandlerType: (*DividerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IntegerDivide",
			Handler:    _Divider_IntegerDivide_Handler,
		},
		{
			MethodName: "Divide",
			Handler:    _Divider_Divide_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "divider.proto",
}

func init() { proto.RegisterFile("divider.proto", fileDescriptor_divider_7a99dab6f8f91d55) }

var fileDescriptor_divider_7a99dab6f8f91d55 = []byte{
	// 181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xc9, 0x2c, 0xcb,
	0x4c, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x32, 0xe2,
	0x12, 0xf1, 0xcc, 0x2b, 0x49, 0x4d, 0x4f, 0x2d, 0x72, 0x01, 0xcb, 0x05, 0xa5, 0x16, 0x96, 0xa6,
	0x16, 0x97, 0x08, 0xf1, 0x70, 0x31, 0x26, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x08, 0x06, 0x31, 0x26,
	0x82, 0x78, 0x49, 0x12, 0x4c, 0x10, 0x5e, 0x92, 0x92, 0x2e, 0x97, 0x28, 0x9a, 0x9e, 0xe2, 0x82,
	0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x11, 0x2e, 0xd6, 0xb4, 0xcc, 0xd4, 0x9c, 0x14, 0xa8, 0x46, 0x08,
	0x47, 0x49, 0x9b, 0x8b, 0x17, 0x87, 0xd9, 0x8c, 0x28, 0x66, 0x33, 0x82, 0xcc, 0x56, 0xe3, 0xe2,
	0xc3, 0x67, 0x28, 0x23, 0xd4, 0x50, 0xa3, 0x06, 0x46, 0x2e, 0x76, 0x88, 0xc2, 0x22, 0x21, 0x17,
	0x2e, 0x5e, 0x14, 0xf7, 0x08, 0x49, 0xe8, 0x15, 0x24, 0xe9, 0x61, 0xf3, 0x96, 0x94, 0x24, 0x16,
	0x19, 0xa8, 0x3d, 0xfa, 0x5c, 0x6c, 0x50, 0xed, 0x82, 0x20, 0x45, 0xa8, 0xfa, 0x84, 0x90, 0x85,
	0x20, 0x1a, 0x92, 0xd8, 0xc0, 0xa1, 0x68, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x95, 0xd8, 0xa4,
	0x98, 0x56, 0x01, 0x00, 0x00,
}
