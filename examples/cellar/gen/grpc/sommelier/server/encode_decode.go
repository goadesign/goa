// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// sommelier gRPC server encoders and decoders
//
// Command:
// $ goa gen goa.design/goa/examples/cellar/design -o
// $(GOPATH)/src/goa.design/goa/examples/cellar

package server

import (
	"context"

	sommelierpb "goa.design/goa/examples/cellar/gen/grpc/sommelier/pb"
	sommelier "goa.design/goa/examples/cellar/gen/sommelier"
	sommelierviews "goa.design/goa/examples/cellar/gen/sommelier/views"
	goagrpc "goa.design/goa/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodePickResponse encodes responses from the "sommelier" service "pick"
// endpoint.
func EncodePickResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(sommelierviews.StoredBottleCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sommelier", "pick", "sommelierviews.StoredBottleCollection", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewStoredBottleCollection(result)
	return resp, nil
}

// DecodePickRequest decodes requests sent to "sommelier" service "pick"
// endpoint.
func DecodePickRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *sommelierpb.PickRequest
		ok      bool
	)
	{
		if message, ok = v.(*sommelierpb.PickRequest); !ok {
			return nil, goagrpc.ErrInvalidType("sommelier", "pick", "*sommelierpb.PickRequest", v)
		}
	}
	var payload *sommelier.Criteria
	{
		payload = NewCriteria(message)
	}
	return payload, nil
}
