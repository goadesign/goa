// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// sommelier gRPC client
//
// Command:
// $ goa gen goa.design/goa/examples/cellar/design -o
// $(GOPATH)/src/goa.design/goa/examples/cellar

package client

import (
	"context"

	goa "goa.design/goa"
	sommelierpb "goa.design/goa/examples/cellar/gen/grpc/sommelier/pb"
	goagrpc "goa.design/goa/grpc"
	"google.golang.org/grpc"
)

// Client lists the service endpoint gRPC clients.
type Client struct {
	grpccli sommelierpb.SommelierClient
	opts    []grpc.CallOption
}

// NewClient instantiates gRPC client for all the sommelier service servers.
func NewClient(cc *grpc.ClientConn, opts ...grpc.CallOption) *Client {
	return &Client{
		grpccli: sommelierpb.NewSommelierClient(cc),
		opts:    opts,
	}
}

// Pick calls the "Pick" function in sommelierpb.SommelierClient interface.
func (c *Client) Pick() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildPickFunc(c.grpccli, c.opts...),
			EncodePickRequest,
			DecodePickResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goagrpc.DecodeError(err)
		}
		return res, nil
	}
}
