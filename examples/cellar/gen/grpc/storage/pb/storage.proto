// Code generated with goa v2.0.0-wip, DO NOT EDIT.
//
// storage protocol buffer definition
//
// Command:
// $ goa gen goa.design/goa/examples/cellar/design -o
// $(GOPATH)/src/goa.design/goa/examples/cellar

syntax = "proto3";

package cellar;

option go_package = "storagepb";

// The storage service makes it possible to view, add or remove wine bottles.
service Storage {
	// List all stored bottles
	rpc List (ListRequest) returns (StoredBottleCollection);
	// Show bottle by ID
	rpc Show (ShowRequest) returns (ShowResponse);
	// Add new bottle and return its ID.
	rpc Add (AddRequest) returns (AddResponse);
	// Remove bottle from storage
	rpc Remove (RemoveRequest) returns (RemoveResponse);
	// Rate bottles by IDs
	rpc Rate (RateRequest) returns (RateResponse);
	// Add n number of bottles and return their IDs. This is a multipart request
// and each part has field name 'bottle' and contains the encoded bottle info
// to be added.
	rpc MultiAdd (MultiAddRequest) returns (MultiAddResponse);
	// Update bottles with the given IDs. This is a multipart request and each part
// has field name 'bottle' and contains the encoded bottle info to be updated.
// The IDs in the query parameter is mapped to each part in the request.
	rpc MultiUpdate (MultiUpdateRequest) returns (MultiUpdateResponse);
}

message ListRequest {
}

message StoredBottleCollection {
	repeated StoredBottle field = 1;
}
// A StoredBottle describes a bottle retrieved by the storage service.
message StoredBottle {
	// ID is the unique id of the bottle.
	string id = 8;
	// Name of bottle
	string name = 1;
	// Winery that produces wine
	Winery winery = 2;
	// Vintage of bottle
	uint32 vintage = 3;
	// Composition is the list of grape varietals and associated percentage.
	repeated Component composition = 4;
	// Description of bottle
	string description = 5;
	// Rating of bottle from 1 (worst) to 5 (best)
	uint32 rating = 6;
}

message Winery {
	// Name of winery
	string name = 1;
	// Region of winery
	string region = 2;
	// Country of winery
	string country = 3;
	// Winery website URL
	string url = 4;
}

message Component {
	// Grape varietal
	string varietal = 1;
	// Percentage of varietal in wine
	uint32 percentage = 2;
}

message ShowRequest {
	// ID of bottle to show
	string id = 1;
}

message ShowResponse {
	// ID is the unique id of the bottle.
	string id = 8;
	// Name of bottle
	string name = 1;
	// Winery that produces wine
	Winery winery = 2;
	// Vintage of bottle
	uint32 vintage = 3;
	// Composition is the list of grape varietals and associated percentage.
	repeated Component composition = 4;
	// Description of bottle
	string description = 5;
	// Rating of bottle from 1 (worst) to 5 (best)
	uint32 rating = 6;
}

message AddRequest {
	// Name of bottle
	string name = 1;
	// Winery that produces wine
	Winery winery = 2;
	// Vintage of bottle
	uint32 vintage = 3;
	// Composition is the list of grape varietals and associated percentage.
	repeated Component composition = 4;
	// Description of bottle
	string description = 5;
	// Rating of bottle from 1 (worst) to 5 (best)
	uint32 rating = 6;
}

message AddResponse {
	string field = 1;
}

message RemoveRequest {
	// ID of bottle to remove
	string id = 1;
}

message RemoveResponse {
}

message RateRequest {
	map<uint32, ArrayOfString> field = 1;
}

message ArrayOfString {
	repeated string field = 1;
}

message RateResponse {
}

message MultiAddRequest {
	repeated Bottle field = 1;
}
// Bottle describes a bottle of wine to be stored.
message Bottle {
	// Name of bottle
	string name = 1;
	// Winery that produces wine
	Winery winery = 2;
	// Vintage of bottle
	uint32 vintage = 3;
	// Composition is the list of grape varietals and associated percentage.
	repeated Component composition = 4;
	// Description of bottle
	string description = 5;
	// Rating of bottle from 1 (worst) to 5 (best)
	uint32 rating = 6;
}

message MultiAddResponse {
	repeated string field = 1;
}

message MultiUpdateRequest {
	// IDs of the bottles to be updated
	repeated string ids = 1;
	// Array of bottle info that matches the ids attribute
	repeated Bottle bottles = 2;
}

message MultiUpdateResponse {
}
