// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// sommelier HTTP client types
//
// Command:
// $ goa gen goa.design/goa/examples/cellar/design -o
// $(GOPATH)/src/goa.design/goa/examples/cellar

package client

import (
	goa "goa.design/goa"
	sommelier "goa.design/goa/examples/cellar/gen/sommelier"
	sommelierviews "goa.design/goa/examples/cellar/gen/sommelier/views"
)

// PickRequestBody is the type of the "sommelier" service "pick" endpoint HTTP
// request body.
type PickRequestBody struct {
	// Name of bottle to pick
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Varietals in preference order
	Varietal []string `form:"varietal,omitempty" json:"varietal,omitempty" xml:"varietal,omitempty"`
	// Winery of bottle to pick
	Winery *string `form:"winery,omitempty" json:"winery,omitempty" xml:"winery,omitempty"`
}

// PickResponseBody is the type of the "sommelier" service "pick" endpoint HTTP
// response body.
type PickResponseBody []*StoredBottleResponseBody

// PickNoCriteriaResponseBody is the type of the "sommelier" service "pick"
// endpoint HTTP response body for the "no_criteria" error.
type PickNoCriteriaResponseBody string

// PickNoMatchResponseBody is the type of the "sommelier" service "pick"
// endpoint HTTP response body for the "no_match" error.
type PickNoMatchResponseBody string

// StoredBottleResponseBody is used to define fields on response body types.
type StoredBottleResponseBody struct {
	// ID is the unique id of the bottle.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of bottle
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Winery that produces wine
	Winery *WineryResponseBody `form:"winery,omitempty" json:"winery,omitempty" xml:"winery,omitempty"`
	// Vintage of bottle
	Vintage *uint32 `form:"vintage,omitempty" json:"vintage,omitempty" xml:"vintage,omitempty"`
	// Composition is the list of grape varietals and associated percentage.
	Composition []*ComponentResponseBody `form:"composition,omitempty" json:"composition,omitempty" xml:"composition,omitempty"`
	// Description of bottle
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Rating of bottle from 1 (worst) to 5 (best)
	Rating *uint32 `form:"rating,omitempty" json:"rating,omitempty" xml:"rating,omitempty"`
}

// WineryResponseBody is used to define fields on response body types.
type WineryResponseBody struct {
	// Name of winery
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Region of winery
	Region *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	// Country of winery
	Country *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	// Winery website URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// ComponentResponseBody is used to define fields on response body types.
type ComponentResponseBody struct {
	// Grape varietal
	Varietal *string `form:"varietal,omitempty" json:"varietal,omitempty" xml:"varietal,omitempty"`
	// Percentage of varietal in wine
	Percentage *uint32 `form:"percentage,omitempty" json:"percentage,omitempty" xml:"percentage,omitempty"`
}

// NewPickRequestBody builds the HTTP request body from the payload of the
// "pick" endpoint of the "sommelier" service.
func NewPickRequestBody(p *sommelier.Criteria) *PickRequestBody {
	body := &PickRequestBody{
		Name:   p.Name,
		Winery: p.Winery,
	}
	if p.Varietal != nil {
		body.Varietal = make([]string, len(p.Varietal))
		for j, val := range p.Varietal {
			body.Varietal[j] = val
		}
	}
	return body
}

// NewPickStoredBottleCollectionOK builds a "sommelier" service "pick" endpoint
// result from a HTTP "OK" response.
func NewPickStoredBottleCollectionOK(body PickResponseBody) sommelierviews.StoredBottleCollection {
	v := make(sommelierviews.StoredBottleCollection, len(body))
	for i, n := range body {
		t := &sommelierviews.StoredBottleView{
			ID:          n.ID,
			Name:        n.Name,
			Vintage:     n.Vintage,
			Description: n.Description,
			Rating:      n.Rating,
		}
		if n.Composition != nil {
			t.Composition = make([]*sommelierviews.Component, len(n.Composition))
			for j, val := range n.Composition {
				t.Composition[j] = &sommelierviews.Component{
					Varietal:   val.Varietal,
					Percentage: val.Percentage,
				}
			}
		}
		if n.Winery != nil {
			t.Winery = unmarshalWineryResponseBodyToViewedWinery(n.Winery)
		}
		v[i] = &sommelierviews.StoredBottle{t, "default"}
	}
	return v
}

// NewPickNoCriteria builds a sommelier service pick endpoint no_criteria error.
func NewPickNoCriteria(body PickNoCriteriaResponseBody) sommelier.NoCriteria {
	v := sommelier.NoCriteria(body)
	return v
}

// NewPickNoMatch builds a sommelier service pick endpoint no_match error.
func NewPickNoMatch(body PickNoMatchResponseBody) sommelier.NoMatch {
	v := sommelier.NoMatch(body)
	return v
}

// Validate runs the validations defined on StoredBottleResponseBody
func (body *StoredBottleResponseBody) Validate() (err error) {
	if body.Winery != nil {
		if err2 := body.Winery.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
