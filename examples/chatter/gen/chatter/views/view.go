// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// chatter views
//
// Command:
// $ goa gen goa.design/goa/examples/chatter/design -o
// $(GOPATH)/src/goa.design/goa/examples/chatter

package views

import (
	goa "goa.design/goa"
)

// ChatSummaryCollection is the viewed result type that is projected based on a
// view.
type ChatSummaryCollection struct {
	// Type to project
	Projected ChatSummaryCollectionView
	// View to render
	View string
}

// ChatSummary is the viewed result type that is projected based on a view.
type ChatSummary struct {
	// Type to project
	Projected *ChatSummaryView
	// View to render
	View string
}

// ChatSummaryCollectionView is a type that runs validations on a projected
// type.
type ChatSummaryCollectionView []*ChatSummaryView

// ChatSummaryView is a type that runs validations on a projected type.
type ChatSummaryView struct {
	// Message sent to the server
	Message *string
	// Length of the message sent
	Length *int
	// Time at which the message was sent
	SentAt *string
}

// Validate runs the validations defined on the viewed result type
// ChatSummaryCollection.
func (result ChatSummaryCollection) Validate() (err error) {
	switch result.View {
	case "tiny":
		err = result.Projected.ValidateTiny()
	case "default", "":
		err = result.Projected.Validate()
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"tiny", "default"})
	}
	return
}

// Validate runs the validations defined on the viewed result type ChatSummary.
func (result *ChatSummary) Validate() (err error) {
	switch result.View {
	case "tiny":
		err = result.Projected.ValidateTiny()
	case "default", "":
		err = result.Projected.Validate()
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"tiny", "default"})
	}
	return
}

// ValidateTiny runs the validations defined on ChatSummaryCollectionView using
// the "tiny" view.
func (result ChatSummaryCollectionView) ValidateTiny() (err error) {
	for _, item := range result {
		if err2 := item.ValidateTiny(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Validate runs the validations defined on ChatSummaryCollectionView using the
// "default" view.
func (result ChatSummaryCollectionView) Validate() (err error) {
	for _, item := range result {
		if err2 := item.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTiny runs the validations defined on ChatSummaryView using the
// "tiny" view.
func (result *ChatSummaryView) ValidateTiny() (err error) {
	if result.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "result"))
	}
	return
}

// Validate runs the validations defined on ChatSummaryView using the "default"
// view.
func (result *ChatSummaryView) Validate() (err error) {
	if result.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "result"))
	}
	if result.SentAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.sent_at", *result.SentAt, goa.FormatDateTime))
	}
	return
}
