// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// cars endpoints
//
// Command:
// $ goa gen goa.design/goa/examples/streaming/design -o
// $(GOPATH)/src/goa.design/goa/examples/streaming

package carssvc

import (
	"context"

	goa "goa.design/goa"
	"goa.design/goa/security"
)

// Endpoints wraps the "cars" service endpoints.
type Endpoints struct {
	Login  goa.Endpoint
	List   goa.Endpoint
	Add    goa.Endpoint
	Update goa.Endpoint
}

// ListEndpointInput is the input type of "list" endpoint that holds the method
// payload and the server stream.
type ListEndpointInput struct {
	// Payload is the method payload.
	Payload *ListPayload
	// Stream is the server stream used by the "list" method to send data.
	Stream ListServerStream
}

// AddEndpointInput is the input type of "add" endpoint that holds the method
// payload and the server stream.
type AddEndpointInput struct {
	// Payload is the method payload.
	Payload *AddPayload
	// Stream is the server stream used by the "add" method to send data.
	Stream AddServerStream
}

// UpdateEndpointInput is the input type of "update" endpoint that holds the
// method payload and the server stream.
type UpdateEndpointInput struct {
	// Payload is the method payload.
	Payload *UpdatePayload
	// Stream is the server stream used by the "update" method to send data.
	Stream UpdateServerStream
}

// NewEndpoints wraps the methods of the "cars" service with endpoints.
func NewEndpoints(s Service, authBasicFn security.AuthBasicFunc, authJWTFn security.AuthJWTFunc) *Endpoints {
	return &Endpoints{
		Login:  NewLoginEndpoint(s, authBasicFn),
		List:   NewListEndpoint(s, authJWTFn),
		Add:    NewAddEndpoint(s, authJWTFn),
		Update: NewUpdateEndpoint(s, authJWTFn),
	}
}

// Use applies the given middleware to all the "cars" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Login = m(e.Login)
	e.List = m(e.List)
	e.Add = m(e.Add)
	e.Update = m(e.Update)
}

// NewLoginEndpoint returns an endpoint function that calls the method "login"
// of service "cars".
func NewLoginEndpoint(s Service, authBasicFn security.AuthBasicFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*LoginPayload)
		var err error
		sc := security.BasicScheme{
			Name: "basic",
		}
		ctx, err = authBasicFn(ctx, p.User, p.Password, &sc)
		if err != nil {
			return nil, err
		}
		return s.Login(ctx, p)
	}
}

// NewListEndpoint returns an endpoint function that calls the method "list" of
// service "cars".
func NewListEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		ep := req.(*ListEndpointInput)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"stream:read", "stream:write"},
			RequiredScopes: []string{"stream:read"},
		}
		ctx, err = authJWTFn(ctx, ep.Payload.Token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.List(ctx, ep.Payload, ep.Stream)
	}
}

// NewAddEndpoint returns an endpoint function that calls the method "add" of
// service "cars".
func NewAddEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		ep := req.(*AddEndpointInput)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"stream:read", "stream:write"},
			RequiredScopes: []string{"stream:write"},
		}
		var token string
		if ep.Payload.Token != nil {
			token = *ep.Payload.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.Add(ctx, ep.Payload, ep.Stream)
	}
}

// NewUpdateEndpoint returns an endpoint function that calls the method
// "update" of service "cars".
func NewUpdateEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		ep := req.(*UpdateEndpointInput)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"stream:read", "stream:write"},
			RequiredScopes: []string{"stream:write"},
		}
		var token string
		if ep.Payload.Token != nil {
			token = *ep.Payload.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.Update(ctx, ep.Payload, ep.Stream)
	}
}
