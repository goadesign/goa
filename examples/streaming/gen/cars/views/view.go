// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// cars views
//
// Command:
// $ goa gen goa.design/goa/examples/streaming/design -o
// $(GOPATH)/src/goa.design/goa/examples/streaming

package views

import (
	goa "goa.design/goa"
)

// StoredCar is the viewed result type that is projected based on a view.
type StoredCar struct {
	// Type to project
	Projected *StoredCarView
	// View to render
	View string
}

// StoredCarCollection is the viewed result type that is projected based on a
// view.
type StoredCarCollection struct {
	// Type to project
	Projected StoredCarCollectionView
	// View to render
	View string
}

// StoredCarView is a type that runs validations on a projected type.
type StoredCarView struct {
	// The make of the car
	Make *string
	// The car model
	Model *string
	// The car body style
	BodyStyle *string
}

// StoredCarCollectionView is a type that runs validations on a projected type.
type StoredCarCollectionView []*StoredCarView

// Validate runs the validations defined on the viewed result type StoredCar.
func (result *StoredCar) Validate() (err error) {
	switch result.View {
	case "default", "":
		err = result.Projected.Validate()
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// Validate runs the validations defined on the viewed result type
// StoredCarCollection.
func (result StoredCarCollection) Validate() (err error) {
	switch result.View {
	case "default", "":
		err = result.Projected.Validate()
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// Validate runs the validations defined on StoredCarView using the "default"
// view.
func (result *StoredCarView) Validate() (err error) {
	if result.Make == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("make", "result"))
	}
	if result.Model == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("model", "result"))
	}
	if result.BodyStyle == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("body_style", "result"))
	}
	return
}

// Validate runs the validations defined on StoredCarCollectionView using the
// "default" view.
func (result StoredCarCollectionView) Validate() (err error) {
	for _, item := range result {
		if err2 := item.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
