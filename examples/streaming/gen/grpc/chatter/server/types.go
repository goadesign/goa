// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// chatter gRPC server types
//
// Command:
// $ goa gen goa.design/goa/examples/streaming/design -o
// $(GOPATH)/src/goa.design/goa/examples/streaming

package server

import (
	goa "goa.design/goa"
	chattersvc "goa.design/goa/examples/streaming/gen/chatter"
	chattersvcviews "goa.design/goa/examples/streaming/gen/chatter/views"
	chatterpb "goa.design/goa/examples/streaming/gen/grpc/chatter/pb"
)

// NewLoginPayload builds the payload of the "login" endpoint of the "chatter"
// service from the gRPC request type.
func NewLoginPayload(user string, password string) *chattersvc.LoginPayload {
	v := &chattersvc.LoginPayload{}
	v.User = user
	v.Password = password
	return v
}

// NewLoginResponse builds the gRPC response type from the result of the
// "login" endpoint of the "chatter" service.
func NewLoginResponse(result string) *chatterpb.LoginResponse {
	message := &chatterpb.LoginResponse{}
	message.Field = result
	return message
}

// NewEchoerPayload builds the payload of the "echoer" endpoint of the
// "chatter" service from the gRPC request type.
func NewEchoerPayload(token string) *chattersvc.EchoerPayload {
	v := &chattersvc.EchoerPayload{}
	v.Token = token
	return v
}

func NewEchoerResponse(result string) *chatterpb.EchoerResponse {
	v := &chatterpb.EchoerResponse{}
	v.Field = result
	return v
}

func NewEchoerStreamingRequest(v *chatterpb.EchoerStreamingRequest) string {
	spayload := v.Field
	return spayload
}

// NewListenerPayload builds the payload of the "listener" endpoint of the
// "chatter" service from the gRPC request type.
func NewListenerPayload(token string) *chattersvc.ListenerPayload {
	v := &chattersvc.ListenerPayload{}
	v.Token = token
	return v
}

func NewListenerStreamingRequest(v *chatterpb.ListenerStreamingRequest) string {
	spayload := v.Field
	return spayload
}

// NewSummaryPayload builds the payload of the "summary" endpoint of the
// "chatter" service from the gRPC request type.
func NewSummaryPayload(token string) *chattersvc.SummaryPayload {
	v := &chattersvc.SummaryPayload{}
	v.Token = token
	return v
}

func NewChatSummaryCollection(vresult chattersvcviews.ChatSummaryCollectionView) *chatterpb.ChatSummaryCollection {
	v := &chatterpb.ChatSummaryCollection{}
	v.Field = make([]*chatterpb.ChatSummary, len(vresult))
	for i, val := range vresult {
		v.Field[i] = &chatterpb.ChatSummary{}
		if val.Message != nil {
			v.Field[i].Message_ = *val.Message
		}
		if val.Length != nil {
			v.Field[i].Length = int32(*val.Length)
		}
		if val.SentAt != nil {
			v.Field[i].SentAt = *val.SentAt
		}
	}
	return v
}

func NewSummaryStreamingRequest(v *chatterpb.SummaryStreamingRequest) string {
	spayload := v.Field
	return spayload
}

// NewSubscribePayload builds the payload of the "subscribe" endpoint of the
// "chatter" service from the gRPC request type.
func NewSubscribePayload(token string) *chattersvc.SubscribePayload {
	v := &chattersvc.SubscribePayload{}
	v.Token = token
	return v
}

func NewSubscribeResponse(result *chattersvc.Event) *chatterpb.SubscribeResponse {
	v := &chatterpb.SubscribeResponse{
		Message_: result.Message,
		Action:   result.Action,
		AddedAt:  result.AddedAt,
	}
	return v
}

// NewHistoryPayload builds the payload of the "history" endpoint of the
// "chatter" service from the gRPC request type.
func NewHistoryPayload(view *string, token string) *chattersvc.HistoryPayload {
	v := &chattersvc.HistoryPayload{}
	v.View = view
	v.Token = token
	return v
}

func NewHistoryResponse(vresult *chattersvcviews.ChatSummaryView) *chatterpb.HistoryResponse {
	v := &chatterpb.HistoryResponse{}
	if vresult.Message != nil {
		v.Message_ = *vresult.Message
	}
	if vresult.Length != nil {
		v.Length = int32(*vresult.Length)
	}
	if vresult.SentAt != nil {
		v.SentAt = *vresult.SentAt
	}
	return v
}

// ValidateChatSummaryCollection runs the validations defined on
// ChatSummaryCollection.
func ValidateChatSummaryCollection(message *chatterpb.ChatSummaryCollection) (err error) {
	for _, e := range message.Field {
		if e != nil {
			if err2 := ValidateChatSummary(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateChatSummary runs the validations defined on ChatSummary.
func ValidateChatSummary(message *chatterpb.ChatSummary) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.sent_at", message.SentAt, goa.FormatDateTime))

	return
}

// ValidateSubscribeResponse runs the validations defined on SubscribeResponse.
func ValidateSubscribeResponse(message *chatterpb.SubscribeResponse) (err error) {
	if !(message.Action == "added") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.action", message.Action, []interface{}{"added"}))
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("message.added_at", message.AddedAt, goa.FormatDateTime))

	return
}

// ValidateHistoryResponse runs the validations defined on HistoryResponse.
func ValidateHistoryResponse(message *chatterpb.HistoryResponse) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.sent_at", message.SentAt, goa.FormatDateTime))

	return
}
