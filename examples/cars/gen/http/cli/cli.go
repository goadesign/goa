// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// cars HTTP client CLI support package
//
// Command:
// $ goa gen goa.design/goa/examples/cars/design -o
// $(GOPATH)/src/goa.design/goa/examples/cars

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	goa "goa.design/goa"
	carssvcc "goa.design/goa/examples/cars/gen/http/cars/client"
	goahttp "goa.design/goa/http"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `cars (login|list)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` cars login --user "username" --password "password"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
	dialer goahttp.Dialer,
	connConfigFn goahttp.ConnConfigureFunc,
) (goa.Endpoint, interface{}, error) {
	var (
		carsFlags = flag.NewFlagSet("cars", flag.ContinueOnError)

		carsLoginFlags        = flag.NewFlagSet("login", flag.ExitOnError)
		carsLoginUserFlag     = carsLoginFlags.String("user", "REQUIRED", "")
		carsLoginPasswordFlag = carsLoginFlags.String("password", "REQUIRED", "")

		carsListFlags     = flag.NewFlagSet("list", flag.ExitOnError)
		carsListStyleFlag = carsListFlags.String("style", "REQUIRED", "")
		carsListTokenFlag = carsListFlags.String("token", "REQUIRED", "")
	)
	carsFlags.Usage = carsUsage
	carsLoginFlags.Usage = carsLoginUsage
	carsListFlags.Usage = carsListUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if len(os.Args) < flag.NFlag()+3 {
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = os.Args[1+flag.NFlag()]
		switch svcn {
		case "cars":
			svcf = carsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(os.Args[2+flag.NFlag():]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = os.Args[2+flag.NFlag()+svcf.NFlag()]
		switch svcn {
		case "cars":
			switch epn {
			case "login":
				epf = carsLoginFlags

			case "list":
				epf = carsListFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if len(os.Args) > 2+flag.NFlag()+svcf.NFlag() {
		if err := epf.Parse(os.Args[3+flag.NFlag()+svcf.NFlag():]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "cars":
			c := carssvcc.NewClient(scheme, host, doer, enc, dec, restore, dialer, connConfigFn)
			switch epn {
			case "login":
				endpoint = c.Login()
				data, err = carssvcc.BuildLoginPayload(*carsLoginUserFlag, *carsLoginPasswordFlag)
			case "list":
				endpoint = c.List()
				data, err = carssvcc.BuildListPayload(*carsListStyleFlag, *carsListTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// carsUsage displays the usage of the cars command and its subcommands.
func carsUsage() {
	fmt.Fprintf(os.Stderr, `The cars service lists car models by body style.
Usage:
    %s [globalflags] cars COMMAND [flags]

COMMAND:
    login: Creates a valid JWT
    list: Lists car models by body style.

Additional help:
    %s cars COMMAND --help
`, os.Args[0], os.Args[0])
}
func carsLoginUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] cars login -user STRING -password STRING

Creates a valid JWT
    -user STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` cars login --user "username" --password "password"
`, os.Args[0])
}

func carsListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] cars list -style STRING -token STRING

Lists car models by body style.
    -style STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` cars list --style "hatchback" --token "Voluptatem perferendis dignissimos similique doloribus et rerum."
`, os.Args[0])
}
