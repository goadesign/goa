openapi: 3.0.3
info:
  title: ""
  version: ""
servers:
- url: localhost:80
  description: Default server for test api
paths:
  /:
    get:
      tags:
      - testService
      summary: testEndpointA testService
      operationId: testService#testEndpointA
      parameters:
      - name: k
        in: query
        allowEmptyValue: true
        required: true
        schema:
          type: string
          example: Quia molestias.
        example: Doloribus qui quia.
      - name: Token
        in: header
        allowEmptyValue: true
        required: true
        schema:
          type: string
          example: Et tempora et quae.
        example: Itaque inventore optio.
      - name: X-Authorization
        in: header
        allowEmptyValue: true
        required: true
        schema:
          type: string
          example: Ullam aut.
        example: Iste perspiciatis.
      - name: Authorization
        in: header
        description: Basic Auth security using Basic scheme (https://tools.ietf.org/html/rfc7617)
        required: true
        schema:
          type: string
        example: Basic Z29hOmRlc2lnbg==
      requestBody:
        content:
          application/json:
            schema:
              example: {}
              $ref: '#/components/schemas/Empty'
            example: {}
      responses:
        "200":
          description: ""
          content:
            "":
              schema:
                example: {}
                $ref: '#/components/schemas/Empty'
              example: {}
      security:
      - api_key_query_k: []
        basic_header_Authorization: []
        jwt_header_X-Authorization:
        - api:read
        - api:write
        oauth2_header_Token:
        - api:read
        - api:write
    post:
      tags:
      - testService
      summary: testEndpointB testService
      operationId: testService#testEndpointB
      parameters:
      - name: auth
        in: query
        allowEmptyValue: true
        required: true
        schema:
          type: string
          example: Harum et.
        example: Neque nisi quibusdam nisi sint sunt.
      - name: Authorization
        in: header
        allowEmptyValue: true
        required: true
        schema:
          type: string
          example: Quia velit assumenda fuga est sint.
        example: Quo qui molestiae iure.
      requestBody:
        content:
          application/json:
            schema:
              example: {}
              $ref: '#/components/schemas/Empty'
            example: {}
      responses:
        "200":
          description: ""
          content:
            "":
              schema:
                example: {}
                $ref: '#/components/schemas/Empty'
              example: {}
      security:
      - api_key_header_Authorization: []
      - oauth2_query_auth:
        - api:read
        - api:write
components:
  schemas:
    Empty:
      example: {}
      $ref: '#/components/schemas/Empty'
  securitySchemes:
    api_key_header_Authorization:
      type: apiKey
      description: Secures endpoint by requiring an API key.
      name: Authorization
      in: header
    api_key_query_k:
      type: apiKey
      description: Secures endpoint by requiring an API key.
      name: k
      in: query
    basic_header_Authorization:
      type: http
      description: Basic authentication used to authenticate security principal during signin
      scheme: basic
    jwt_header_X-Authorization:
      type: http
      description: Secures endpoint by requiring a valid JWT token retrieved via the signin endpoint. Supports scopes "api:read" and "api:write".
      scheme: Bearer
    oauth2_header_Token:
      type: oauth2
      description: Secures endpoint by requiring a valid OAuth2 token retrieved via the signin endpoint. Supports scopes "api:read" and "api:write".
      flows:
        authorizationCode:
          authorizationUrl: http://goa.design/authorization
          tokenUrl: http://goa.design/token
          refreshUrl: http://goa.design/refresh
          scopes:
            api:read: Read-only access
            api:write: Read and write access
    oauth2_query_auth:
      type: oauth2
      description: Secures endpoint by requiring a valid OAuth2 token retrieved via the signin endpoint. Supports scopes "api:read" and "api:write".
      flows:
        authorizationCode:
          authorizationUrl: http://goa.design/authorization
          tokenUrl: http://goa.design/token
          refreshUrl: http://goa.design/refresh
          scopes:
            api:read: Read-only access
            api:write: Read and write access
